const AboutSection = () => {
  const titleAnimation = {
    hidden: { opacity: 0 },
    show: { opacity: 1, transition: { duration: 2 } },
  };

  const containerAnim = {
    hidden: { x: 100 },
    show: {
      x: 0,
      transition: {
        duration: 0.8,
        ease: "easeOut",
        staggerChildren: 1,
        when: "beforeChildren",
      },
    },
  };
  return (
    <About>
      <Description>
        <motion.div
          variants={containerAnim}
          initial="hidden"
          animate="show"
          className="title"
        >
          <Hide>
            <motion.h2 variants={titleAnimation}> We work to make </motion.h2>{" "}
          </Hide>{" "}
          <Hide>
            <motion.h2 variants={titleAnimation}>
              your <span> dreams </span> come{" "}
            </motion.h2>{" "}
          </Hide>{" "}
          <Hide>
            <motion.h2 variants={titleAnimation}> true. </motion.h2>{" "}
          </Hide>{" "}
        </motion.div>{" "}
        <p>
          Contact us for any photography ideas that you have.We have
          professionals with amazing skills.{" "}
        </p>{" "}
        <Button> Contact Us </Button>{" "}
      </Description>{" "}
      <Image>
        <IMG src={home1} alt="The guy with the camera" />
      </Image>{" "}
    </About>
  );
};

//STYLED COMPONENTS

export default AboutSection;

allow to js to do something on the element once it is in view( scroll to view its fire an event)
with useanimation allow to control an animation and framer motion (when an element start to animate using when should be true threshold: ms )
useInView is like a state with specific functionality like resuable hook.
-when an element start to animate with useAnimation
-  const [element, view] = useInView({ threshold: 0.5 });
console.log(view);
return (
  <Services ref={element}>

  import { useInView } from "react-intersection-observer";
import { useAnimation } from "framer-motion";
import { fade } from "../Animation";

const ServiceSection = () => {
  const controlsAnim = useAnimation();
  const [element, view] = useInView({ threshold: 0.5 });

  if (view) {
    controlsAnim.start("show");
  } else {
    controlsAnim.start("hidden");
  }
  return (
    <Services
      variants={fade}
      animate={controlsAnim}
      initial="hidden"
      ref={element}
    >
    -------------------------------

  so far i set a variants or else i can say initial and animate pos (once render the component start animate it)

  -control those propreties from variants hidden: {} and show: {} property
